- name: Generate CA config file 
  shell:
    cmd: |
      cd $WORKING && cat > ca-config.json <<EOF
      {
         "signing": {
            "default": {
               "expiry": "8760h"
            },
            "profiles": {
               "kubernetes": {
                 "usages": ["signing", "key encipherment", "server auth", "client auth"],
                 "expiry": "8760h"
               }
            }
          }
      }
      EOF
  environment:
    WORKING: /tmp/kube-bootstrap

- name: Generate CA signing request
  shell:
    cmd: |
      cd $WORKING && cat > ca-csr.json <<EOF
      {
        "CN": "Kubernetes",
        "key": {
        "algo": "rsa",
        "size": 2048
        },
        "names": [
          {
            "C": "US",
            "L": "San Francisco",
            "O": "Devops",
            "OU": "Certificate Authority",
            "ST": "California"
          }
         ]
      }
      EOF
  environment:
    WORKING: /tmp/kube-bootstrap

- name: Check if cfssl and cfssljson are already installed
  stat: path=/home/ubuntu/bin/{{ item }}
  with_items:
    - cfssl
    - cfssljson
  register: cftools

# Certificte authority setup now so TLS certs can be generated 
- name: Generate CA certifcate and private key
  shell:
    cmd: |
      cd $WORKING && cfssl gencert -initca ca-csr.json | cfssljson -bare ca
  environment:
    WORKING: /tmp/kube-bootstrap

- name: Generate Admin Client Certificate 
  shell:
    cmd: |
      cd $WORKING && cat > admin-csr.json <<EOF
      {
        "CN": "Admin",
        "key": {
        "algo": "rsa",
        "size": 2048
        },
        "names": [
          {
            "C": "US",
            "L": "San Francisco",
            "O": "Devops",
            "OU": "Admin Client",
            "ST": "California"
          }
         ]
      }
      EOF
      cfssl gencert -ca=ca.pem -ca-key=ca-key.pem \
      -config=ca-config.json -profile=kubernetes admin-csr.json \
      | cfssljson -bare admin 
  environment:
    WORKING: /tmp/kube-bootstrap

    #- name: Register etcd facts
    #  ec2_instance_facts:
    #    region: "{{ region }}"
    #    filters:
    #       vpc-id: "{{ vpc_id }}"
    #       "tag:Environment": "{{ env }}"
    #       "tag:Role": "etcd"
    #  register: etcd_facts
    #
    #- name: Add etcd hosts to inventory
    #  add_host:
    #    name: "{{ item.private_ip_address }}"
    #    group: etcd_nodes
    #    ansible_user: ubuntu
    #  with_items: "{{ etcd_facts.instances }}"

# item.0 is current index number, item.1 is ip 
- name: Generate Kubelet Client Certificates 
  shell:
    cmd: |
      cd $WORKING && cat > worker_{{ item.0 }}-csr.json <<EOF
      {
        "CN": "system:node:worker_{{ item.0 }}",
        "key": {
        "algo": "rsa",
        "size": 2048
        },
        "names": [
          {
            "C": "US",
            "L": "San Francisco",
            "O": "Devops",
            "OU": "Admin Client",
            "ST": "California"
          }
         ]
      }
      EOF
      cfssl gencert -ca=ca.pem -ca-key=ca-key.pem \
      -config=ca-config.json -hostname=worker_{{ item.0 }},{{ item.1 }} \
      -profile=kubernetes \
      worker_{{ item.0 }}-csr.json \
      | cfssljson -bare worker_{{ item.0 }}
  with_indexed_items: "{{ hostvars[inventory_hostname]['groups']['worker_nodes'] }}"
  environment:
    WORKING: /tmp/kube-bootstrap

- name: Generate the kube-proxy Client certificate
  shell:
    cmd: |
      cd $WORKING && cat > kube-proxy-csr.json <<EOF
      {
        "CN": "system:kube-proxy",
        "key": {
        "algo": "rsa",
        "size": 2048
        },
        "names": [
          {
            "C": "US",
            "L": "San Francisco",
            "O": "system:node-proxier",
            "OU": "Kube-Proxy Client",
            "ST": "California"
          }
         ]
      }
      EOF

      cfssl gencert -ca=ca.pem -ca-key=ca-key.pem \
      -config=ca-config.json \
      -profile=kubernetes \
       kube-proxy-csr.json | cfssljson -bare kube-proxy
  environment:
    WORKING: /tmp/kube-bootstrap

- name: controler ip list
  set_fact:
     ctl_ips: []

- name: Create a comma seperated list of all controller nodes
  set_fact:
    ctl_ips: "{{ ctl_ips }} + [ '{{ item.private_ip_address }},' ]"
  with_items: "{{ controller_instance_facts.instances }}"

- name: Flatten controller string
  set_fact:
    ctl_ips: "{{ctl_ips | join(',')}}"

- name: Generate the Kubernetes API Server cert 
  shell:
    cmd: |
      cd $WORKING && cat > kubernetes-csr.json <<EOF
      {
        "CN": "kubernetes",
        "key": {
        "algo": "rsa",
        "size": 2048
        },
        "names": [
          {
            "C": "US",
            "L": "San Francisco",
            "O": "Kubernetes",
            "OU": "Kubernetes API",
            "ST": "California"
          }
         ]
      }
      EOF

      cfssl gencert -ca=ca.pem -ca-key=ca-key.pem \
      -config=ca-config.json \
      -hostname={{ ctl_ips }},127.0.0.1,kubernetes.default \
      -profile=kubernetes \
      kubernetes-csr.json | cfssljson -bare kubernetes
  environment:
    WORKING: /tmp/kube-bootstrap
