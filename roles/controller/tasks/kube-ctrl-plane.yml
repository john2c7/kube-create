#Bootstrap Kubernetes control plane and configure for high availability. Including external load balancer to expose Kubernetes API Servers to remote clients.
#Kubernetes API Server, Scheduler, and Controller Manager.

# todo: use the ansible wget module
- name: Download v1.8.0 Kubernetes release binaries 
  shell:
    cmd: |
      wget -q --show-progress --https-only --timestamping \
      "https://storage.googleapis.com/kubernetes-release/release/v1.8.0/bin/linux/amd64/kube-apiserver" \
      "https://storage.googleapis.com/kubernetes-release/release/v1.8.0/bin/linux/amd64/kube-controller-manager" \
      "https://storage.googleapis.com/kubernetes-release/release/v1.8.0/bin/linux/amd64/kube-scheduler" \
      "https://storage.googleapis.com/kubernetes-release/release/v1.8.0/bin/linux/amd64/kubectl"
      "https://github.com/coreos/etcd/releases/download/v3.2.8/etcd-v3.2.8-linux-amd64.tar.gz"
      chmod +x kube-apiserver kube-controller-manager kube-scheduler kubectl
  when: "'controller_nodes' in group_names"

- name: Install Kubernetes binaries 
  shell:
    cmd: |
      chmod +x kube-apiserver kube-controller-manager kube-scheduler kubectl
      sudo mv kube-apiserver kube-controller-manager kube-scheduler kubectl /usr/local/bin/

- name: Configure Kubernetes API Server
  shell:
    cmd: |
      sudo mkdir -p /var/lib/kubernetes/
      sudo mv ca.pem ca-key.pem kubernetes-key.pem kubernetes.pem encryption-config.yaml /var/lib/kubernetes/

- name: Set controller name/ip list
  set_fact:
    name_ips: []

- name: Format the names and ips into a string for conf
  set_fact:
    name_ips: "{{ name_ips }} + [ 'https://{{ item.private_ip_address }}:2379' ]"
  with_items: "{{ controller_instance_facts.instances }}"

- name: Flatten controller string
  set_fact:
    controller_string: "{{name_ips | join(',')}}"

- name: Create the Kube API Server systemd service file 
  shell:
    cmd: |
      cat > kube-apiserver.service <<EOF
      [Unit]
      Description=Kubernetes API Server
      Documentation=https://github.com/GoogleCloudPlatform/kubernetes

      [Service]
      ExecStart=/usr/local/bin/kube-apiserver \\
        --admission-control=Initializers,NamespaceLifecycle,NodeRestriction,LimitRanger,ServiceAccount,DefaultStorageClass,ResourceQuota \\
        --advertise-address={{ hostvars[inventory_hostname]['inventory_hostname'] }} \\
        --allow-privileged=true \\
        --apiserver-count=3 \\
        --audit-log-maxage=30 \\
        --audit-log-maxbackup=3 \\
        --audit-log-maxsize=100 \\
        --audit-log-path=/var/log/audit.log \\
        --authorization-mode=Node,RBAC \\
        --bind-address=0.0.0.0 \\
        --client-ca-file=/var/lib/kubernetes/ca.pem \\
        --enable-swagger-ui=true \\
        --etcd-cafile=/var/lib/kubernetes/ca.pem \\
        --etcd-certfile=/var/lib/kubernetes/kubernetes.pem \\
        --etcd-keyfile=/var/lib/kubernetes/kubernetes-key.pem \\
        --etcd-servers={{ controller_string }} \\
        --event-ttl=1h \\
        --experimental-encryption-provider-config=/var/lib/kubernetes/encryption-config.yaml \\
        --insecure-bind-address=127.0.0.1 \\
        --kubelet-certificate-authority=/var/lib/kubernetes/ca.pem \\
        --kubelet-client-certificate=/var/lib/kubernetes/kubernetes.pem \\
        --kubelet-client-key=/var/lib/kubernetes/kubernetes-key.pem \\
        --kubelet-https=true \\
        --runtime-config=api/all \\
        --service-account-key-file=/var/lib/kubernetes/ca-key.pem \\
        --service-cluster-ip-range=10.32.0.0/24 \\
        --service-node-port-range=30000-32767 \\
        --tls-ca-file=/var/lib/kubernetes/ca.pem \\
        --tls-cert-file=/var/lib/kubernetes/kubernetes.pem \\
        --tls-private-key-file=/var/lib/kubernetes/kubernetes-key.pem \\
        --v=2
      Restart=on-failure
      RestartSec=5

      [Install]
      WantedBy=multi-user.target
      EOF

- name: Create the Kube Contoller Manager systemd service file 
  shell:
    cmd: |
      cat > kube-controller-manager.service <<EOF
      [Unit]
      Description=Kubernetes Controller Manager
      Documentation=https://github.com/GoogleCloudPlatform/kubernetes

      [Service]
      ExecStart=/usr/local/bin/kube-controller-manager \\
        --address=0.0.0.0 \\
        --cluster-cidr=10.200.0.0/16 \\
        --cluster-name=kubernetes \\
        --cluster-signing-cert-file=/var/lib/kubernetes/ca.pem \\
        --cluster-signing-key-file=/var/lib/kubernetes/ca-key.pem \\
        --leader-elect=true \\
        --master=http://127.0.0.1:8080 \\
        --root-ca-file=/var/lib/kubernetes/ca.pem \\
        --service-account-private-key-file=/var/lib/kubernetes/ca-key.pem \\
        --service-cluster-ip-range=10.32.0.0/24 \\
        --v=2
      Restart=on-failure
      RestartSec=5

      [Install]
      WantedBy=multi-user.target
      EOF

- name: Create the Kube Scheduler systemd service file 
  shell:
    cmd: |
      cat > kube-scheduler.service <<EOF
      [Unit]
      Description=Kubernetes Scheduler
      Documentation=https://github.com/GoogleCloudPlatform/kubernetes

      [Service]
      ExecStart=/usr/local/bin/kube-scheduler \\
        --leader-elect=true \\
        --master=http://127.0.0.1:8080 \\
        --v=2
      Restart=on-failure
      RestartSec=5

      [Install]
      WantedBy=multi-user.target
      EOF

- name: Move the services into place
  shell:
    cmd: |
      sudo mv kube-apiserver.service kube-scheduler.service kube-controller-manager.service /etc/systemd/system/

- name: Reload config and enable/start kube-apiserver
  become: yes
  systemd:
     name: kube-apiserver
     daemon_reload: yes
     enabled: yes
     state: restarted

- name: Reload config and enable/start kube-apiserver
  become: yes
  systemd:
     name: kube-controller-manager
     daemon_reload: yes
     enabled: yes
     state: restarted
   
- name: Reload config and enable/start kube-apiserver
  become: yes
  systemd:
     name: kube-scheduler
     daemon_reload: yes
     enabled: yes
     state: restarted
